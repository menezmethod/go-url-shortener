package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/gin-gonic/gin"
	"go.uber.org/zap"

	// Import the docs package generated by Swag
	_ "github.com/menezmethod/ref_go/docs"
	"github.com/menezmethod/ref_go/internal/api/router"
	"github.com/menezmethod/ref_go/internal/config"
	"github.com/menezmethod/ref_go/internal/db"
	"github.com/menezmethod/ref_go/internal/logger"
)

// @title URL Shortener API
// @version 1.0
// @description A RESTful API for shortening URLs with analytics.
// @termsOfService http://example.com/terms/

// @contact.name API Support
// @contact.url http://www.example.com/support
// @contact.email support@example.com

// @license.name MIT
// @license.url https://opensource.org/licenses/MIT

// @host localhost:8081
// @BasePath /api
// @schemes http https

// @securityDefinitions.apikey BearerAuth
// @in header
// @name Authorization
// @description Enter 'Bearer ' followed by your JWT token
func main() {
	// Load configuration
	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Initialize logger
	zapLogger, err := logger.NewLogger(cfg)
	if err != nil {
		log.Fatalf("Failed to initialize logger: %v", err)
	}
	defer zapLogger.Sync()

	// Replace global logger
	zap.ReplaceGlobals(zapLogger)

	// Set Gin mode based on environment
	if cfg.Server.Environment == "production" {
		gin.SetMode(gin.ReleaseMode)
	} else {
		gin.SetMode(gin.DebugMode)
	}

	// Initialize database connection
	database, err := db.New(cfg)
	if err != nil {
		zapLogger.Fatal("Failed to connect to database", zap.Error(err))
	}

	// Run database migrations
	if err := db.MigrateDatabase(database.DB, cfg); err != nil {
		zapLogger.Fatal("Failed to run database migrations", zap.Error(err))
	}
	zapLogger.Info("Database migrations applied successfully")

	zapLogger.Info("Successfully connected to database")

	// Create router
	handler := router.New(cfg, zapLogger, database)

	// Configure HTTP server
	srv := &http.Server{
		Addr:         fmt.Sprintf(":%d", cfg.Server.Port),
		Handler:      handler,
		ReadTimeout:  cfg.Server.ReadTimeout,
		WriteTimeout: cfg.Server.WriteTimeout,
		IdleTimeout:  cfg.Server.IdleTimeout,
	}

	// Start the server in a goroutine
	go func() {
		zapLogger.Info("Starting server",
			zap.Int("port", cfg.Server.Port),
			zap.String("environment", cfg.Server.Environment),
			zap.String("base_url", cfg.Server.BaseURL),
		)
		if err := srv.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			zapLogger.Fatal("Server failed", zap.Error(err))
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	// Create a deadline for shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	// Log shutdown
	zapLogger.Info("Shutting down server...")

	// Attempt graceful shutdown
	if err := srv.Shutdown(ctx); err != nil {
		zapLogger.Fatal("Server forced to shutdown", zap.Error(err))
	}

	// Close database connection
	zapLogger.Info("Closing database connection...")
	if err := database.Close(); err != nil {
		zapLogger.Error("Error closing database connection", zap.Error(err))
	}

	zapLogger.Info("Server exited gracefully")
}

{
  "info": {
    "_postman_id": "c2d3e4f5-a6b7-8901-2345-67890abcdef1",
    "name": "URL Shortener API - Links (Part 2)",
    "description": "Update and Delete operations for URL Shortener API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Update Short Link",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Verify short code is available in environment",
              "if (!pm.environment.get('shortCode')) {",
              "    console.warn('Warning: shortCode is not set in the environment. You may need to create a short link first.');",
              "}",
              "",
              "// Generate a new custom alias for testing updates",
              "const randomString = Math.random().toString(36).substring(2, 8);",
              "pm.environment.set('updatedAlias', 'updated-' + randomString);",
              "console.log('Generated updated custom alias: ' + pm.environment.get('updatedAlias'));",
              "",
              "// Set future expiration date (60 days from now) for update",
              "const futureDate = new Date();",
              "futureDate.setDate(futureDate.getDate() + 60);",
              "pm.environment.set('updatedExpirationDate', futureDate.toISOString());",
              "console.log('Set updated expiration date: ' + pm.environment.get('updatedExpirationDate'));",
              "",
              "// Verify auth token exists",
              "if (!pm.environment.get('authToken')) {",
              "    console.warn('Warning: authToken is not set in the environment. Authentication may fail.');",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test successful update of short link",
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has the correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Validate required fields",
              "    pm.expect(jsonData).to.be.an('object');",
              "    pm.expect(jsonData).to.have.property('id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('code').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('url_id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('created_at').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('updated_at').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('is_active').that.is.a('boolean');",
              "});",
              "",
              "// Validate the updates were applied correctly",
              "pm.test(\"Updates were applied correctly\", function () {",
              "    const jsonData = pm.response.json();",
              "    const requestBody = JSON.parse(pm.request.body.raw);",
              "    ",
              "    // Check custom alias if it was in the request",
              "    if (requestBody.custom_alias) {",
              "        pm.expect(jsonData.custom_alias).to.equal(requestBody.custom_alias);",
              "    }",
              "    ",
              "    // Check expiration date if it was in the request",
              "    if (requestBody.expiration_date) {",
              "        // The API might format the date differently, so we check if it contains the same date info",
              "        // by comparing the beginning of the string (YYYY-MM-DD part)",
              "        const requestDate = new Date(requestBody.expiration_date);",
              "        const responseDate = new Date(jsonData.expiration_date);",
              "        pm.expect(responseDate.toISOString().substring(0, 10)).to.equal(requestDate.toISOString().substring(0, 10));",
              "    }",
              "    ",
              "    // Check is_active if it was in the request",
              "    if (requestBody.hasOwnProperty('is_active')) {",
              "        pm.expect(jsonData.is_active).to.equal(requestBody.is_active);",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "PUT",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"custom_alias\": \"{{updatedAlias}}\",\n    \"expiration_date\": \"{{updatedExpirationDate}}\",\n    \"is_active\": true\n}"
        },
        "url": {
          "raw": "{{baseUrl}}{{apiPath}}/links/{{shortCode}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiPath}}",
            "links",
            "{{shortCode}}"
          ]
        },
        "description": "Update properties of an existing short link."
      },
      "response": [
        {
          "name": "Successful Update",
          "originalRequest": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"custom_alias\": \"updated-link\",\n    \"expiration_date\": \"2024-12-31T23:59:59Z\",\n    \"is_active\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/abc123",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "abc123"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"id\": \"5f7c3b7e-c2ed-43f1-a45d-9a4e71e7b2a1\",\n    \"url_id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"code\": \"abc123\",\n    \"custom_alias\": \"updated-link\",\n    \"expiration_date\": \"2024-12-31T23:59:59Z\",\n    \"is_active\": true,\n    \"created_at\": \"2023-04-15T14:30:00Z\",\n    \"updated_at\": \"2023-04-15T15:45:00Z\",\n    \"url\": {\n        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n        \"original_url\": \"https://example.com/test-page\",\n        \"hash\": \"aa9bcde1234567\",\n        \"created_at\": \"2023-04-15T14:30:00Z\",\n        \"updated_at\": \"2023-04-15T14:30:00Z\"\n    }\n}"
        },
        {
          "name": "Link Not Found",
          "originalRequest": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"custom_alias\": \"updated-link\",\n    \"expiration_date\": \"2024-12-31T23:59:59Z\",\n    \"is_active\": true\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/notfound",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "notfound"
              ]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"error\": \"Link not found\"\n}"
        }
      ]
    },
    {
      "name": "Delete Short Link",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Verify short code is available in environment",
              "if (!pm.environment.get('shortCode')) {",
              "    console.warn('Warning: shortCode is not set in the environment. You may need to create a short link first.');",
              "}",
              "",
              "// Verify auth token exists",
              "if (!pm.environment.get('authToken')) {",
              "    console.warn('Warning: authToken is not set in the environment. Authentication may fail.');",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test successful deletion of short link",
              "pm.test(\"Status code is 204 No Content\", function () {",
              "    pm.response.to.have.status(204);",
              "});",
              "",
              "// Since it's a 204 response, there should be no body",
              "pm.test(\"Response body is empty\", function () {",
              "    pm.response.to.not.have.body();",
              "});",
              "",
              "// You could verify the deletion by making a GET request to the same endpoint, but that's",
              "// better handled as a separate test case or with a test runner that executes multiple requests in sequence",
              "",
              "// Clear the shortCode from environment after successful deletion",
              "if (pm.response.code === 204) {",
              "    console.log('Deleted short link with code: ' + pm.environment.get('shortCode'));",
              "    ",
              "    // You might want to keep the shortCode for additional tests or verification",
              "    // If you want to remove it, uncomment the line below:",
              "    // pm.environment.unset('shortCode');",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}{{apiPath}}/links/{{shortCode}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiPath}}",
            "links",
            "{{shortCode}}"
          ]
        },
        "description": "Delete a short link by its code."
      },
      "response": [
        {
          "name": "Successful Deletion",
          "originalRequest": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/abc123",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "abc123"
              ]
            }
          },
          "status": "No Content",
          "code": 204,
          "_postman_previewlanguage": "text",
          "header": [],
          "cookie": [],
          "body": ""
        },
        {
          "name": "Link Not Found",
          "originalRequest": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/notfound",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "notfound"
              ]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"error\": \"Link not found\"\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script for Links Collection Part 2",
          "console.log('Running Links Collection Part 2 pre-request script');",
          "",
          "// Set API version headers or other common parameters here if needed",
          "pm.request.headers.add({",
          "    key: 'Accept-Version',",
          "    value: '1.0'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Tests for Links Collection Part 2",
          "console.log('Running Links Collection Part 2 test script');",
          "",
          "// Common tests for all requests in this collection",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8081"
    },
    {
      "key": "apiPath",
      "value": "/api"
    }
  ]
} 
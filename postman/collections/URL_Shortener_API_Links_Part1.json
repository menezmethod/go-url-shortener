{
  "info": {
    "_postman_id": "b1c2d3e4-f5a6-7890-1234-567890abcdef",
    "name": "URL Shortener API - Links (Part 1)",
    "description": "Create and Get operations for URL Shortener API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Create Short Link",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate a random custom alias if not already set",
              "if (!pm.environment.get('customAlias')) {",
              "    const randomString = Math.random().toString(36).substring(2, 8);",
              "    pm.environment.set('customAlias', 'test-' + randomString);",
              "    console.log('Generated custom alias: ' + pm.environment.get('customAlias'));",
              "}",
              "",
              "// Set future expiration date (30 days from now) if not already set",
              "if (!pm.environment.get('expirationDate')) {",
              "    const futureDate = new Date();",
              "    futureDate.setDate(futureDate.getDate() + 30);",
              "    pm.environment.set('expirationDate', futureDate.toISOString());",
              "    console.log('Set expiration date: ' + pm.environment.get('expirationDate'));",
              "}",
              "",
              "// Ensure test URL is set",
              "if (!pm.environment.get('testUrl')) {",
              "    pm.environment.set('testUrl', 'https://example.com/test-page');",
              "    console.log('Set test URL: ' + pm.environment.get('testUrl'));",
              "}",
              "",
              "// Verify auth token exists",
              "if (!pm.environment.get('authToken')) {",
              "    console.warn('Warning: authToken is not set in the environment. Authentication may fail.');",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test successful short link creation",
              "pm.test(\"Status code is 201 Created\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test(\"Response has the correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Validate required fields",
              "    pm.expect(jsonData).to.be.an('object');",
              "    pm.expect(jsonData).to.have.property('id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('code').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('url_id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('created_at').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('updated_at').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('is_active').that.is.a('boolean');",
              "    ",
              "    // Validate custom alias if provided in the request",
              "    const requestBody = JSON.parse(pm.request.body.raw);",
              "    if (requestBody.custom_alias) {",
              "        pm.expect(jsonData).to.have.property('custom_alias');",
              "        pm.expect(jsonData.custom_alias).to.equal(requestBody.custom_alias);",
              "    }",
              "    ",
              "    // Validate URL object",
              "    pm.expect(jsonData).to.have.property('url').that.is.an('object');",
              "    pm.expect(jsonData.url).to.have.property('id').that.is.a('string');",
              "    pm.expect(jsonData.url).to.have.property('original_url').that.is.a('string');",
              "    pm.expect(jsonData.url.original_url).to.equal(requestBody.url);",
              "});",
              "",
              "// Store the short code for future tests if successful",
              "if (pm.response.code === 201) {",
              "    const jsonData = pm.response.json();",
              "    pm.environment.set('shortCode', jsonData.code);",
              "    console.log('Short code stored in environment variable: ' + jsonData.code);",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"url\": \"{{testUrl}}\",\n    \"custom_alias\": \"{{customAlias}}\",\n    \"expiration_date\": \"{{expirationDate}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}{{apiPath}}/links",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiPath}}",
            "links"
          ]
        },
        "description": "Create a new short link for a URL, optionally with a custom alias and expiration date."
      },
      "response": [
        {
          "name": "Successful Creation",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"https://example.com/test-page\",\n    \"custom_alias\": \"test-link\",\n    \"expiration_date\": \"2023-12-31T23:59:59Z\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links"
              ]
            }
          },
          "status": "Created",
          "code": 201,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"id\": \"5f7c3b7e-c2ed-43f1-a45d-9a4e71e7b2a1\",\n    \"url_id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"code\": \"abc123\",\n    \"custom_alias\": \"test-link\",\n    \"expiration_date\": \"2023-12-31T23:59:59Z\",\n    \"is_active\": true,\n    \"created_at\": \"2023-04-15T14:30:00Z\",\n    \"updated_at\": \"2023-04-15T14:30:00Z\",\n    \"url\": {\n        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n        \"original_url\": \"https://example.com/test-page\",\n        \"hash\": \"aa9bcde1234567\",\n        \"created_at\": \"2023-04-15T14:30:00Z\",\n        \"updated_at\": \"2023-04-15T14:30:00Z\"\n    }\n}"
        }
      ]
    },
    {
      "name": "Get Short Link By Code",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Verify short code is available in environment",
              "if (!pm.environment.get('shortCode')) {",
              "    console.warn('Warning: shortCode is not set in the environment. You may need to create a short link first.');",
              "}",
              "",
              "// Verify auth token exists",
              "if (!pm.environment.get('authToken')) {",
              "    console.warn('Warning: authToken is not set in the environment. Authentication may fail.');",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test successful retrieval of short link",
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has the correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Validate required fields",
              "    pm.expect(jsonData).to.be.an('object');",
              "    pm.expect(jsonData).to.have.property('id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('code').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('url_id').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('created_at').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('updated_at').that.is.a('string');",
              "    pm.expect(jsonData).to.have.property('is_active').that.is.a('boolean');",
              "    ",
              "    // Validate code matches the requested code",
              "    const requestedCode = pm.request.url.path[2]; // Path: [apiPath, 'links', 'code']",
              "    pm.expect(jsonData.code).to.equal(requestedCode);",
              "    ",
              "    // Validate URL object",
              "    pm.expect(jsonData).to.have.property('url').that.is.an('object');",
              "    pm.expect(jsonData.url).to.have.property('id').that.is.a('string');",
              "    pm.expect(jsonData.url).to.have.property('original_url').that.is.a('string');",
              "})",
              "",
              "// Update environment variables if needed",
              "if (pm.response.code === 200) {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Update testUrl if it doesn't match",
              "    if (pm.environment.get('testUrl') !== jsonData.url.original_url) {",
              "        pm.environment.set('testUrl', jsonData.url.original_url);",
              "        console.log('Updated test URL: ' + jsonData.url.original_url);",
              "    }",
              "    ",
              "    // Update customAlias if available",
              "    if (jsonData.custom_alias) {",
              "        pm.environment.set('customAlias', jsonData.custom_alias);",
              "        console.log('Updated custom alias: ' + jsonData.custom_alias);",
              "    }",
              "}"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}{{apiPath}}/links/{{shortCode}}",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiPath}}",
            "links",
            "{{shortCode}}"
          ]
        },
        "description": "Get details of a short link using its code."
      },
      "response": [
        {
          "name": "Successful Response",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/abc123",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "abc123"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"id\": \"5f7c3b7e-c2ed-43f1-a45d-9a4e71e7b2a1\",\n    \"url_id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n    \"code\": \"abc123\",\n    \"custom_alias\": \"test-link\",\n    \"expiration_date\": \"2023-12-31T23:59:59Z\",\n    \"is_active\": true,\n    \"created_at\": \"2023-04-15T14:30:00Z\",\n    \"updated_at\": \"2023-04-15T14:30:00Z\",\n    \"url\": {\n        \"id\": \"a1b2c3d4-e5f6-7890-1234-567890abcdef\",\n        \"original_url\": \"https://example.com/test-page\",\n        \"hash\": \"aa9bcde1234567\",\n        \"created_at\": \"2023-04-15T14:30:00Z\",\n        \"updated_at\": \"2023-04-15T14:30:00Z\"\n    }\n}"
        },
        {
          "name": "Link Not Found",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/notfound",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "notfound"
              ]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"error\": \"Link not found\"\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script for Links Collection",
          "console.log('Running Links Collection pre-request script');",
          "",
          "// Set API version headers or other common parameters here if needed",
          "pm.request.headers.add({",
          "    key: 'Accept-Version',",
          "    value: '1.0'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Tests for Links Collection",
          "console.log('Running Links Collection test script');",
          "",
          "// Common tests for all requests in this collection",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test('Content-Type header is present', function () {",
          "    pm.response.to.have.header('Content-Type');",
          "});",
          "",
          "pm.test('Content-Type header is application/json', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8081"
    },
    {
      "key": "apiPath",
      "value": "/api"
    }
  ]
} 
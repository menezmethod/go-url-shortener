{
  "info": {
    "_postman_id": "a1b2c3d4-e5f6-7890-1234-567890abcdef",
    "name": "URL Shortener API - Auth",
    "description": "Authentication requests for the URL Shortener API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Generate Authentication Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test successful token generation",
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has the correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('object');",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData.token).to.be.a('string');",
              "    pm.expect(jsonData.token).to.not.be.empty;",
              "});",
              "",
              "pm.test(\"Token is a valid JWT format\", function () {",
              "    const jsonData = pm.response.json();",
              "    const token = jsonData.token;",
              "    // JWT format: header.payload.signature (3 parts separated by dots)",
              "    pm.expect(token.split('.')).to.have.lengthOf(3);",
              "});",
              "",
              "// Store token for future requests if successful",
              "if (pm.response.code === 200) {",
              "    const jsonData = pm.response.json();",
              "    pm.environment.set('authToken', jsonData.token);",
              "    console.log('Token stored in environment variable: authToken');",
              "}",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// You can set a timestamp or generate specific test data here if needed",
              "console.log('Preparing to authenticate with master password');",
              "",
              "// Ensure master password is set in the environment",
              "if (!pm.environment.get('masterPassword')) {",
              "    console.warn('Warning: masterPassword is not set in the environment');",
              "}",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"master_password\": \"{{masterPassword}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}{{apiPath}}/auth/token",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiPath}}",
            "auth",
            "token"
          ]
        },
        "description": "Generate a JWT token using the master password. The token will be used for authentication in subsequent requests."
      },
      "response": [
        {
          "name": "Successful Response",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"master_password\": \"your_master_password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/auth/token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "auth",
                "token"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\"\n}"
        },
        {
          "name": "Unauthorized - Invalid master password",
          "originalRequest": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"master_password\": \"wrong_password\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/auth/token",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "auth",
                "token"
              ]
            }
          },
          "status": "Unauthorized",
          "code": 401,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"error\": \"Invalid master password\"\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script for Auth Collection",
          "console.log('Running Auth Collection pre-request script');"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Tests for Auth Collection",
          "console.log('Running Auth Collection test script');",
          "",
          "// Verify Content-Type header is present and correct",
          "pm.test('Content-Type header is present', function () {",
          "    pm.response.to.have.header('Content-Type');",
          "});",
          "",
          "pm.test('Content-Type header is application/json', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8081"
    },
    {
      "key": "apiPath",
      "value": "/api"
    }
  ]
} 
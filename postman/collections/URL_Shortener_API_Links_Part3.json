{
  "info": {
    "_postman_id": "d3e4f5a6-b7c8-9012-3456-7890abcdef12",
    "name": "URL Shortener API - Links (Part 3)",
    "description": "Statistics operations for URL Shortener API",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "12345678"
  },
  "item": [
    {
      "name": "Get Link Statistics",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Verify short code is available in environment",
              "if (!pm.environment.get('shortCode')) {",
              "    console.warn('Warning: shortCode is not set in the environment. You may need to create a short link first.');",
              "}",
              "",
              "// Verify auth token exists",
              "if (!pm.environment.get('authToken')) {",
              "    console.warn('Warning: authToken is not set in the environment. Authentication may fail.');",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "// Test successful retrieval of link statistics",
              "pm.test(\"Status code is 200 OK\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has the correct structure\", function () {",
              "    const jsonData = pm.response.json();",
              "    ",
              "    // Validate required fields for LinkStats",
              "    pm.expect(jsonData).to.be.an('object');",
              "    pm.expect(jsonData).to.have.property('total_clicks').that.is.a('number');",
              "    ",
              "    // These properties might be empty objects or arrays if there are no clicks yet",
              "    pm.expect(jsonData).to.have.property('clicks_by_day').that.is.an('object');",
              "    pm.expect(jsonData).to.have.property('top_browsers').that.is.an('object');",
              "    pm.expect(jsonData).to.have.property('top_devices').that.is.an('object');",
              "    pm.expect(jsonData).to.have.property('top_os').that.is.an('object');",
              "    pm.expect(jsonData).to.have.property('top_referrers').that.is.an('object');",
              "    pm.expect(jsonData).to.have.property('recent_clicks').that.is.an('array');",
              "    ",
              "    // If we have recent clicks, validate their structure",
              "    if (jsonData.recent_clicks.length > 0) {",
              "        const firstClick = jsonData.recent_clicks[0];",
              "        pm.expect(firstClick).to.have.property('id').that.is.a('string');",
              "        pm.expect(firstClick).to.have.property('short_link_id').that.is.a('string');",
              "        pm.expect(firstClick).to.have.property('created_at').that.is.a('string');",
              "        ",
              "        // These fields may be null depending on what information was captured",
              "        if (firstClick.browser) pm.expect(firstClick.browser).to.be.a('string');",
              "        if (firstClick.device) pm.expect(firstClick.device).to.be.a('string');",
              "        if (firstClick.os) pm.expect(firstClick.os).to.be.a('string');",
              "        if (firstClick.country) pm.expect(firstClick.country).to.be.a('string');",
              "        if (firstClick.city) pm.expect(firstClick.city).to.be.a('string');",
              "        if (firstClick.referrer) pm.expect(firstClick.referrer).to.be.a('string');",
              "        if (firstClick.ip_address) pm.expect(firstClick.ip_address).to.be.a('string');",
              "        if (firstClick.user_agent) pm.expect(firstClick.user_agent).to.be.a('string');",
              "    }",
              "});",
              "",
              "// Visualizations could be added here for Postman's visualization feature",
              "// For example, creating a bar chart of browser usage or clicks by day",
              "pm.visualizer.set(() => {",
              "    const jsonData = pm.response.json();",
              "    if (!jsonData || jsonData.total_clicks === 0) {",
              "        return `<div style=\"font-family: Arial; padding: 20px;\">",
              "            <h3>No statistics available yet</h3>",
              "            <p>This link hasn't been clicked yet or no statistical data is available.</p>",
              "        </div>`;",
              "    }",
              "    ",
              "    // Simple HTML table representation of the statistics",
              "    let template = `",
              "    <div style=\"font-family: Arial; padding: 20px;\">",
              "        <h3>Link Statistics Summary</h3>",
              "        <p><strong>Total Clicks:</strong> ${jsonData.total_clicks}</p>",
              "        <p><strong>Last Clicked:</strong> ${jsonData.last_clicked || 'Never'}</p>",
              "        ",
              "        <h4>Top Browsers</h4>",
              "        <ul>",
              "        ${Object.entries(jsonData.top_browsers || {}).map(([browser, count]) => ",
              "            `<li>${browser}: ${count} clicks</li>`",
              "        ).join('')}",
              "        </ul>",
              "        ",
              "        <h4>Top Devices</h4>",
              "        <ul>",
              "        ${Object.entries(jsonData.top_devices || {}).map(([device, count]) => ",
              "            `<li>${device}: ${count} clicks</li>`",
              "        ).join('')}",
              "        </ul>",
              "        ",
              "        <h4>Top Operating Systems</h4>",
              "        <ul>",
              "        ${Object.entries(jsonData.top_os || {}).map(([os, count]) => ",
              "            `<li>${os}: ${count} clicks</li>`",
              "        ).join('')}",
              "        </ul>",
              "        ",
              "        <h4>Top Referrers</h4>",
              "        <ul>",
              "        ${Object.entries(jsonData.top_referrers || {}).map(([referrer, count]) => ",
              "            `<li>${referrer || 'Direct'}: ${count} clicks</li>`",
              "        ).join('')}",
              "        </ul>",
              "    </div>",
              "    `;",
              "    ",
              "    return template;",
              "}, {mimeType: 'text/html'});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{authToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}{{apiPath}}/links/{{shortCode}}/stats",
          "host": [
            "{{baseUrl}}"
          ],
          "path": [
            "{{apiPath}}",
            "links",
            "{{shortCode}}",
            "stats"
          ]
        },
        "description": "Get usage statistics for a short link, including click count, browser and device information, and geographic data."
      },
      "response": [
        {
          "name": "Successful Statistics",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/abc123/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "abc123",
                "stats"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"total_clicks\": 42,\n    \"last_clicked\": \"2023-04-19T08:30:15Z\",\n    \"clicks_by_day\": {\n        \"2023-04-19\": 15,\n        \"2023-04-18\": 27\n    },\n    \"top_browsers\": {\n        \"Chrome\": 20,\n        \"Firefox\": 12,\n        \"Safari\": 10\n    },\n    \"top_devices\": {\n        \"Desktop\": 30,\n        \"Mobile\": 12\n    },\n    \"top_os\": {\n        \"Windows\": 15,\n        \"MacOS\": 15,\n        \"iOS\": 7,\n        \"Android\": 5\n    },\n    \"top_referrers\": {\n        \"twitter.com\": 15,\n        \"facebook.com\": 10,\n        \"linkedin.com\": 5,\n        \"direct\": 12\n    },\n    \"recent_clicks\": [\n        {\n            \"id\": \"c1d2e3f4-a5b6-7890-1234-567890abcdef\",\n            \"short_link_id\": \"5f7c3b7e-c2ed-43f1-a45d-9a4e71e7b2a1\",\n            \"created_at\": \"2023-04-19T08:30:15Z\",\n            \"ip_address\": \"192.168.1.100\",\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36\",\n            \"browser\": \"Chrome\",\n            \"device\": \"Desktop\",\n            \"os\": \"Windows\",\n            \"country\": \"United States\",\n            \"city\": \"New York\",\n            \"referrer\": \"twitter.com\"\n        },\n        {\n            \"id\": \"d2e3f4a5-b6c7-8901-2345-67890abcdef1\",\n            \"short_link_id\": \"5f7c3b7e-c2ed-43f1-a45d-9a4e71e7b2a1\",\n            \"created_at\": \"2023-04-19T08:15:22Z\",\n            \"ip_address\": \"192.168.1.101\",\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.4 Safari/605.1.15\",\n            \"browser\": \"Safari\",\n            \"device\": \"Desktop\",\n            \"os\": \"MacOS\",\n            \"country\": \"Canada\",\n            \"city\": \"Toronto\",\n            \"referrer\": \"facebook.com\"\n        }\n    ]\n}"
        },
        {
          "name": "No Clicks Yet",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/newlink/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "newlink",
                "stats"
              ]
            }
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"total_clicks\": 0,\n    \"last_clicked\": null,\n    \"clicks_by_day\": {},\n    \"top_browsers\": {},\n    \"top_devices\": {},\n    \"top_os\": {},\n    \"top_referrers\": {},\n    \"recent_clicks\": []\n}"
        },
        {
          "name": "Link Not Found",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}{{apiPath}}/links/notfound/stats",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "{{apiPath}}",
                "links",
                "notfound",
                "stats"
              ]
            }
          },
          "status": "Not Found",
          "code": 404,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "body": "{\n    \"error\": \"Link not found\"\n}"
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Pre-request Script for Links Collection Part 3",
          "console.log('Running Links Collection Part 3 pre-request script');",
          "",
          "// Set API version headers or other common parameters here if needed",
          "pm.request.headers.add({",
          "    key: 'Accept-Version',",
          "    value: '1.0'",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global Tests for Links Collection Part 3",
          "console.log('Running Links Collection Part 3 test script');",
          "",
          "// Common tests for all requests in this collection",
          "pm.test('Response time is acceptable', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(1000);",
          "});",
          "",
          "pm.test('Content-Type header is present', function () {",
          "    pm.response.to.have.header('Content-Type');",
          "});",
          "",
          "pm.test('Content-Type header is application/json', function () {",
          "    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8081"
    },
    {
      "key": "apiPath",
      "value": "/api"
    }
  ]
} 
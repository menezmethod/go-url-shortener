---
description: Cursor rules derived by SpecStory from the project AI interaction history
globs: *
---

## PROJECT OVERVIEW
This project is a URL shortener built using Go.  The project structure follows standard Go conventions.  The project uses Ginkgo and Gomega for testing. A new branch, `feature/ginkgo-test-coverage`, has been created to manage the test coverage implementation.  The project documentation is being updated to include a comprehensive testing guide.  Testing tools used include Ginkgo, Gomega, and httptest.  A task checklist for achieving 100% test coverage has been created and is being tracked in `docs/ginkgo_test_coverage.md`.  The project now includes a comprehensive guide on implementing Ginkgo and Gomega testing for 100% coverage.  A new branch `feature/ginkgo-test-coverage` has been created to manage this work.  The Makefile has been updated to include Ginkgo-specific test targets.  Ginkgo and Gomega have been added to the project dependencies. A test helper package (`internal/testutils`) has been created to include mock implementations and common testing utilities.  A markdown file (`docs/ginkgo_test_coverage.md`) outlines the strategy for achieving 100% test coverage.  This document will be updated regularly to reflect progress.  The document includes:
    - Introduction to Ginkgo and Gomega
    - Test Coverage Strategy
    - Implementation Plan
    - Testing Tools and Setup
    - Writing Tests
    - Integration with CI/CD
    - Progress Tracking
    - Troubleshooting
    - Next Steps
- Overall, our test coverage is at approximately **43.6%** across the entire codebase (up from 35.2%). Here's a breakdown of our current testing status:
    - **Well-Tested Components**: Cache (100%), Domain (100%), Middleware (96.6%), Logger (93.3%), Config (83.8%), Service (74.6%), Repository (67.2%), Handlers (96.6%)
    - **Partially Tested Components**:  
    - **Untested Components**: DB (0%), Redis (0%), Auth (0%), Metrics (0%), Router (0%), Integration Tests (0%)
- A new branch, `feature/postman-test-suite`, has been created to develop comprehensive Postman tests for the API.  The tests will include pre-request scripts, post-request scripts, dynamic variables, environment configurations, and detailed assertions. A Swagger/OpenAPI 2.0 specification has been created for the API,  located in `docs/swagger.yaml`.  A Postman environment file has been created to manage test environment variables.  The Postman collection has been split into smaller, manageable files to improve maintainability.  A new Postman environment file for production has been added (`postman/environments/URL_Shortener_API_Production_Environment.json`).
- A new GitHub Actions workflow (`postman-tests.yml`) has been created to automate Postman API tests as part of the CI/CD pipeline.  The workflow uses Newman to run the Postman collection. A `test-postman` target has been added to the Makefile to run Postman tests locally.  The README has been updated with instructions on running Postman tests locally and in the CI/CD pipeline.  The `postman-tests.yml` workflow includes setup for PostgreSQL, building and running the application, and using Newman to execute the Postman collection. The workflow uploads the test results as an artifact.  A new workflow file (`.github/workflows/postman-tests.yml`) has been added to run postman tests automatically as part of the CI/CD pipeline.  The workflow now uses Docker Compose to manage application dependencies and environment variables.  A `.env.dev` file is used for local development and testing.  The workflow uses GitHub Secrets for sensitive information.  The `apiPath` variable should be used consistently in the Postman collection URLs to ensure proper routing. The `masterPassword` should be handled securely using environment variables or secrets.


## CODE STYLE
Follow standard Go code style guidelines.

## FOLDER ORGANIZATION
The project uses a standard Go project layout:

- `cmd`: Contains the main application executable.
- `configs`: Configuration files.
- `docs`: Project documentation, including Swagger/OpenAPI specification.
- `internal`: Internal project packages.
- `migrations`: Database migration scripts.
- `scripts`: Utility scripts.
- `internal/testutils`: Test helper package containing mocks and utilities.
- `postman`: Directory containing Postman collections and environments.
- `postman/collections`: Postman API test collections.
- `postman/environments`: Postman API test environments.


## TECH STACK
- Go
- Gin
- PostgreSQL
- Redis
- Ginkgo
- Gomega
- Postman (added for API testing)
- Newman (added for running Postman collections in CI/CD)
- Node.js (added for Newman installation)
- Docker Compose (added for managing application dependencies)


## PROJECT-SPECIFIC STANDARDS
- 100% test coverage target using Ginkgo and Gomega.
- Comprehensive documentation for testing procedures.
- Use of mocks for external dependencies.
- Use of a task checklist (`docs/2025-03-09_19-23-task-checklist-for-100%-test-coverage.md`) to track progress towards 100% test coverage.
- **Never hardcode secrets in source code.** Use environment variables or secure configuration files for sensitive information.  A `.env.test.example` file has been created to guide the setup of test environment variables.  The actual `.env.test` file should be added to `.gitignore`.  Use GitHub secrets for managing sensitive information in CI/CD environments.  For local development, override test environment variables by setting them before running tests.  **Use placeholders for secrets in test files.** Avoid hardcoding secrets directly; instead, utilize constants with placeholder values.  Refer to `internal/config/config_test.go` for an example of this best practice.

## WORKFLOW & RELEASE RULES
- Create a new branch for each feature.
- Use Gitflow for branching and merging.
- All code must pass linting and testing before merging.
- Implement CI/CD pipeline for automated testing and deployment.
- Utilize GitGuardian or similar secret detection tools during the CI/CD pipeline to prevent hardcoded secrets from being committed.
- Use a `.env.test` file for managing test environment variables locally, but ensure it's added to `.gitignore` to prevent accidental commits.
- Update GitHub Actions workflows to use the latest version of `actions/upload-artifact` (v4 or later) to address deprecation warnings.
- Comprehensive Postman test suite to be developed and integrated into the CI/CD pipeline.  A new branch `feature/postman-test-suite` has been created for this purpose.  The postman collection will be stored in `postman/collections`.  Postman collections should be broken down into smaller, more manageable files (e.g., auth, links, etc.)
- A new GitHub Actions workflow (`postman-tests.yml`) has been implemented to run the Postman test suite.  The workflow includes setup for PostgreSQL, building and running the application, and using Newman to execute the Postman collection.  The workflow uploads the test results as an artifact. The workflow uses Docker Compose for managing application dependencies and environment variables. The `.env.dev` file is used to manage environment variables.  GitHub secrets are used for sensitive data.  The `apiPath` variable should be correctly included in all Postman collection request URLs.  The `masterPassword` should be handled securely using environment variables or secrets. A temporary environment file for local testing can be created using the Makefile target `test-postman`.

## REFERENCE EXAMPLES
- Ginkgo: [https://onsi.github.io/ginkgo/](https://onsi.github.io/ginkgo/)
- Gomega: [https://onsi.github.io/gomega/](https://onsi.github.io/gomega/)
- Postman: [https://www.postman.com/](https://www.postman.com/) (Added for API testing)
- Newman: [https://www.npmjs.com/package/newman](https://www.npmjs.com/package/newman) (Added for running Postman collections)
- Docker Compose: [https://docs.docker.com/compose/](https://docs.docker.com/compose/) (Added for managing application dependencies)


## PROJECT DOCUMENTATION & CONTEXT SYSTEM
- A markdown file (`docs/ginkgo_test_coverage.md`) outlines the strategy for achieving 100% test coverage.  This document will be updated regularly to reflect progress.  This document includes:
    - Introduction to Ginkgo and Gomega
    - Test Coverage Strategy
    - Implementation Plan
    - Testing Tools and Setup
    - Writing Tests
    - Integration with CI/CD
    - Progress Tracking
    - Troubleshooting
    - Next Steps
- Overall, our test coverage is at approximately **43.6%** across the entire codebase (up from 35.2%). Here's a breakdown of our current testing status:
    - **Well-Tested Components**: Cache (100%), Domain (100%), Middleware (96.6%), Logger (93.3%), Config (83.8%), Service (74.6%), Repository (67.2%), Handlers (96.6%)
    - **Partially Tested Components**: 
    - **Untested Components**: DB (0%), Redis (0%), Auth (0%), Metrics (0%), Router (0%), Integration Tests (0%)
- Added `.env.test.example` file for managing test environment variables.  This file should be copied to `.env.test` and populated with secure values.  `.env.test` should be added to `.gitignore`.  README.md updated with instructions on setting up the test environment using `.env.test`. Makefile updated to use environment variables from `.env.test` if available.  GitHub Actions workflow created for automated testing using GitHub secrets for sensitive information.  Swagger/OpenAPI 2.0 specification added for API documentation in `docs/swagger.yaml`. Postman collection will be created to support comprehensive API testing in `postman/collections`.  Postman environment file added for managing test environment variables.  A separate production environment file (`postman/environments/URL_Shortener_API_Production_Environment.json`) has been added for testing against the production URL (https://rsto.us).  The README now includes instructions on running Postman tests locally using the Makefile's `test-postman` target and in the CI/CD pipeline via the `postman-tests.yml` workflow.  The `apiPath` variable should be correctly included in all Postman collection request URLs.  The `masterPassword` should be handled securely using environment variables or secrets.  The project now uses Docker Compose for managing application dependencies and environment variables. A `.env.dev` file is used for local development. GitHub Secrets are used for sensitive data in CI/CD.  The `apiPath` variable should be "api", not "/api".


## DEBUGGING
- Use Go's built-in debugging tools.
- Utilize logging effectively.
- Use `docker-compose logs -f` to view application logs when running with Docker Compose.
- Use `make docker-compose-status` to check the status of Docker Compose services and view container logs.

## FINAL DOs AND DON'Ts
- **DO** write comprehensive tests.
- **DO** use mocks for external dependencies.
- **DO** follow the project's code style guidelines.
- **DO** update the documentation as you make progress.
- **DO** use environment variables for sensitive data, such as database credentials and API keys.  Use GitHub secrets for managing sensitive information in CI/CD environments.
- **DO** add `.env.test` to your `.gitignore` file.
- **DO** refer to the README for instructions on setting up the test environment.
- **DO** run tests using the Makefile targets (`make test`, `make test-v`, `make test-postman`, `make docker-compose-restart`, `make docker-compose-up`, `make docker-compose-down`, `make docker-compose-status`).
- **DO** use placeholders for secrets in test files.
- **DO** develop a comprehensive Postman test suite for API testing.  Store the Postman collection in `postman/collections`.  Organize the Postman collection into smaller, more manageable files.  Use the appropriate Postman environment file (development or production) based on your target environment. Ensure the `apiPath` variable is correctly used in all request URLs. Handle the `masterPassword` securely via environment variables or secrets. Use Docker Compose for managing application dependencies and environment variables.  Use `api` as the value for `apiPath`, not `/api`.
- **DON'T** commit code that doesn't pass linting and testing.
- **DON'T** merge code without proper code review.
- **DON'T** hardcode secrets into your code.
- **DON'T** commit `.env.test` to version control.
- **DON'T** commit sensitive information directly to the repository.  Use environment variables and GitHub Secrets appropriately.